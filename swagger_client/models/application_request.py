# coding: utf-8

"""
    Openmoney API

    Openmoney API  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApplicationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_name': 'str',
        'homepage_uri': 'str',
        'application_description': 'str',
        'authorization_callback_uri': 'str'
    }

    attribute_map = {
        'application_name': 'application_name',
        'homepage_uri': 'homepage_uri',
        'application_description': 'application_description',
        'authorization_callback_uri': 'authorization_callback_uri'
    }

    def __init__(self, application_name=None, homepage_uri=None, application_description=None, authorization_callback_uri=None):  # noqa: E501
        """ApplicationRequest - a model defined in Swagger"""  # noqa: E501

        self._application_name = None
        self._homepage_uri = None
        self._application_description = None
        self._authorization_callback_uri = None
        self.discriminator = None

        self.application_name = application_name
        self.homepage_uri = homepage_uri
        if application_description is not None:
            self.application_description = application_description
        self.authorization_callback_uri = authorization_callback_uri

    @property
    def application_name(self):
        """Gets the application_name of this ApplicationRequest.  # noqa: E501

        Applications Name  # noqa: E501

        :return: The application_name of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ApplicationRequest.

        Applications Name  # noqa: E501

        :param application_name: The application_name of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")  # noqa: E501
        if application_name is not None and len(application_name) > 255:
            raise ValueError("Invalid value for `application_name`, length must be less than or equal to `255`")  # noqa: E501
        if application_name is not None and not re.search(r'^[A-Za-z0-9_.-]+$', application_name):  # noqa: E501
            raise ValueError(r"Invalid value for `application_name`, must be a follow pattern or equal to `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501

        self._application_name = application_name

    @property
    def homepage_uri(self):
        """Gets the homepage_uri of this ApplicationRequest.  # noqa: E501

        Applications home page  # noqa: E501

        :return: The homepage_uri of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._homepage_uri

    @homepage_uri.setter
    def homepage_uri(self, homepage_uri):
        """Sets the homepage_uri of this ApplicationRequest.

        Applications home page  # noqa: E501

        :param homepage_uri: The homepage_uri of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        if homepage_uri is None:
            raise ValueError("Invalid value for `homepage_uri`, must not be `None`")  # noqa: E501
        if homepage_uri is not None and len(homepage_uri) > 512:
            raise ValueError("Invalid value for `homepage_uri`, length must be less than or equal to `512`")  # noqa: E501
        if homepage_uri is not None and not re.search(r'^((https?:)(\/\/\/?)([\\w]*(?::[\\w]*)?@)?([\\d\\w\\.-]+)(?::(\\d+))?)?([\/\\\\\\w\\.()-]*)?(?:([?][^#]*)?(#.*)?)*', homepage_uri):  # noqa: E501
            raise ValueError(r"Invalid value for `homepage_uri`, must be a follow pattern or equal to `/^((https?:)(\/\/\/?)([\\w]*(?::[\\w]*)?@)?([\\d\\w\\.-]+)(?::(\\d+))?)?([\/\\\\\\w\\.()-]*)?(?:([?][^#]*)?(#.*)?)*/`")  # noqa: E501

        self._homepage_uri = homepage_uri

    @property
    def application_description(self):
        """Gets the application_description of this ApplicationRequest.  # noqa: E501

        Application Description  # noqa: E501

        :return: The application_description of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._application_description

    @application_description.setter
    def application_description(self, application_description):
        """Sets the application_description of this ApplicationRequest.

        Application Description  # noqa: E501

        :param application_description: The application_description of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        if application_description is not None and len(application_description) > 1048:
            raise ValueError("Invalid value for `application_description`, length must be less than or equal to `1048`")  # noqa: E501

        self._application_description = application_description

    @property
    def authorization_callback_uri(self):
        """Gets the authorization_callback_uri of this ApplicationRequest.  # noqa: E501

        Callback url after authorization.  # noqa: E501

        :return: The authorization_callback_uri of this ApplicationRequest.  # noqa: E501
        :rtype: str
        """
        return self._authorization_callback_uri

    @authorization_callback_uri.setter
    def authorization_callback_uri(self, authorization_callback_uri):
        """Sets the authorization_callback_uri of this ApplicationRequest.

        Callback url after authorization.  # noqa: E501

        :param authorization_callback_uri: The authorization_callback_uri of this ApplicationRequest.  # noqa: E501
        :type: str
        """
        if authorization_callback_uri is None:
            raise ValueError("Invalid value for `authorization_callback_uri`, must not be `None`")  # noqa: E501
        if authorization_callback_uri is not None and len(authorization_callback_uri) > 512:
            raise ValueError("Invalid value for `authorization_callback_uri`, length must be less than or equal to `512`")  # noqa: E501
        if authorization_callback_uri is not None and not re.search(r'^((https?:)(\/\/\/?)([\\w]*(?::[\\w]*)?@)?([\\d\\w\\.-]+)(?::(\\d+))?)?([\/\\\\\\w\\.()-]*)?(?:([?][^#]*)?(#.*)?)*', authorization_callback_uri):  # noqa: E501
            raise ValueError(r"Invalid value for `authorization_callback_uri`, must be a follow pattern or equal to `/^((https?:)(\/\/\/?)([\\w]*(?::[\\w]*)?@)?([\\d\\w\\.-]+)(?::(\\d+))?)?([\/\\\\\\w\\.()-]*)?(?:([?][^#]*)?(#.*)?)*/`")  # noqa: E501

        self._authorization_callback_uri = authorization_callback_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
