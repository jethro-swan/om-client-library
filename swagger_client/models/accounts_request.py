# coding: utf-8

"""
    Openmoney API

    Openmoney API  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'account_namespace': 'str',
        'currency': 'str',
        'currency_namespace': 'str',
        'stewards': 'list[str]',
        'public_key': 'str'
    }

    attribute_map = {
        'account': 'account',
        'account_namespace': 'account_namespace',
        'currency': 'currency',
        'currency_namespace': 'currency_namespace',
        'stewards': 'stewards',
        'public_key': 'publicKey'
    }

    def __init__(self, account=None, account_namespace=None, currency=None, currency_namespace=None, stewards=None, public_key=None):  # noqa: E501
        """AccountsRequest - a model defined in Swagger"""  # noqa: E501

        self._account = None
        self._account_namespace = None
        self._currency = None
        self._currency_namespace = None
        self._stewards = None
        self._public_key = None
        self.discriminator = None

        self.account = account
        self.account_namespace = account_namespace
        self.currency = currency
        self.currency_namespace = currency_namespace
        self.stewards = stewards
        if public_key is not None:
            self.public_key = public_key

    @property
    def account(self):
        """Gets the account of this AccountsRequest.  # noqa: E501


        :return: The account of this AccountsRequest.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AccountsRequest.


        :param account: The account of this AccountsRequest.  # noqa: E501
        :type: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501
        if account is not None and len(account) > 255:
            raise ValueError("Invalid value for `account`, length must be less than or equal to `255`")  # noqa: E501
        if account is not None and not re.search(r'^[A-Za-z0-9_-]+$', account):  # noqa: E501
            raise ValueError(r"Invalid value for `account`, must be a follow pattern or equal to `/^[A-Za-z0-9_-]+$/`")  # noqa: E501

        self._account = account

    @property
    def account_namespace(self):
        """Gets the account_namespace of this AccountsRequest.  # noqa: E501


        :return: The account_namespace of this AccountsRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_namespace

    @account_namespace.setter
    def account_namespace(self, account_namespace):
        """Sets the account_namespace of this AccountsRequest.


        :param account_namespace: The account_namespace of this AccountsRequest.  # noqa: E501
        :type: str
        """
        if account_namespace is None:
            raise ValueError("Invalid value for `account_namespace`, must not be `None`")  # noqa: E501
        if account_namespace is not None and len(account_namespace) > 255:
            raise ValueError("Invalid value for `account_namespace`, length must be less than or equal to `255`")  # noqa: E501
        if account_namespace is not None and not re.search(r'^[A-Za-z0-9_.-]+$', account_namespace):  # noqa: E501
            raise ValueError(r"Invalid value for `account_namespace`, must be a follow pattern or equal to `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501

        self._account_namespace = account_namespace

    @property
    def currency(self):
        """Gets the currency of this AccountsRequest.  # noqa: E501


        :return: The currency of this AccountsRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountsRequest.


        :param currency: The currency of this AccountsRequest.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501
        if currency is not None and len(currency) > 255:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `255`")  # noqa: E501
        if currency is not None and not re.search(r'^[A-Za-z0-9_-]+$', currency):  # noqa: E501
            raise ValueError(r"Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Za-z0-9_-]+$/`")  # noqa: E501

        self._currency = currency

    @property
    def currency_namespace(self):
        """Gets the currency_namespace of this AccountsRequest.  # noqa: E501


        :return: The currency_namespace of this AccountsRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency_namespace

    @currency_namespace.setter
    def currency_namespace(self, currency_namespace):
        """Sets the currency_namespace of this AccountsRequest.


        :param currency_namespace: The currency_namespace of this AccountsRequest.  # noqa: E501
        :type: str
        """
        if currency_namespace is None:
            raise ValueError("Invalid value for `currency_namespace`, must not be `None`")  # noqa: E501
        if currency_namespace is not None and len(currency_namespace) > 255:
            raise ValueError("Invalid value for `currency_namespace`, length must be less than or equal to `255`")  # noqa: E501
        if currency_namespace is not None and not re.search(r'^[A-Za-z0-9_.-]*$', currency_namespace):  # noqa: E501
            raise ValueError(r"Invalid value for `currency_namespace`, must be a follow pattern or equal to `/^[A-Za-z0-9_.-]*$/`")  # noqa: E501

        self._currency_namespace = currency_namespace

    @property
    def stewards(self):
        """Gets the stewards of this AccountsRequest.  # noqa: E501


        :return: The stewards of this AccountsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._stewards

    @stewards.setter
    def stewards(self, stewards):
        """Sets the stewards of this AccountsRequest.


        :param stewards: The stewards of this AccountsRequest.  # noqa: E501
        :type: list[str]
        """
        if stewards is None:
            raise ValueError("Invalid value for `stewards`, must not be `None`")  # noqa: E501

        self._stewards = stewards

    @property
    def public_key(self):
        """Gets the public_key of this AccountsRequest.  # noqa: E501


        :return: The public_key of this AccountsRequest.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this AccountsRequest.


        :param public_key: The public_key of this AccountsRequest.  # noqa: E501
        :type: str
        """
        if public_key is not None and len(public_key) > 800:
            raise ValueError("Invalid value for `public_key`, length must be less than or equal to `800`")  # noqa: E501
        if public_key is not None and len(public_key) < 266:
            raise ValueError("Invalid value for `public_key`, length must be greater than or equal to `266`")  # noqa: E501
        if public_key is not None and not re.search(r'^[A-Za-z0-9\\\\\\s\/=+-]+$', public_key):  # noqa: E501
            raise ValueError(r"Invalid value for `public_key`, must be a follow pattern or equal to `/^[A-Za-z0-9\\\\\\s\/=+-]+$/`")  # noqa: E501

        self._public_key = public_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
