# coding: utf-8

"""
    Openmoney API

    Openmoney API  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NamespacesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'namespace': 'str',
        'parent_namespace': 'str',
        'created': 'int',
        'created_by': 'str',
        'modifications': 'list[Modification]',
        'stewards': 'list[str]'
    }

    attribute_map = {
        'namespace': 'namespace',
        'parent_namespace': 'parent_namespace',
        'created': 'created',
        'created_by': 'created_by',
        'modifications': 'modifications',
        'stewards': 'stewards'
    }

    def __init__(self, namespace=None, parent_namespace=None, created=None, created_by=None, modifications=None, stewards=None):  # noqa: E501
        """NamespacesResponse - a model defined in Swagger"""  # noqa: E501

        self._namespace = None
        self._parent_namespace = None
        self._created = None
        self._created_by = None
        self._modifications = None
        self._stewards = None
        self.discriminator = None

        self.namespace = namespace
        self.parent_namespace = parent_namespace
        if created is not None:
            self.created = created
        if created_by is not None:
            self.created_by = created_by
        if modifications is not None:
            self.modifications = modifications
        self.stewards = stewards

    @property
    def namespace(self):
        """Gets the namespace of this NamespacesResponse.  # noqa: E501


        :return: The namespace of this NamespacesResponse.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this NamespacesResponse.


        :param namespace: The namespace of this NamespacesResponse.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501
        if namespace is not None and len(namespace) > 255:
            raise ValueError("Invalid value for `namespace`, length must be less than or equal to `255`")  # noqa: E501
        if namespace is not None and not re.search(r'^[A-Za-z0-9_.-]+$', namespace):  # noqa: E501
            raise ValueError(r"Invalid value for `namespace`, must be a follow pattern or equal to `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501

        self._namespace = namespace

    @property
    def parent_namespace(self):
        """Gets the parent_namespace of this NamespacesResponse.  # noqa: E501


        :return: The parent_namespace of this NamespacesResponse.  # noqa: E501
        :rtype: str
        """
        return self._parent_namespace

    @parent_namespace.setter
    def parent_namespace(self, parent_namespace):
        """Sets the parent_namespace of this NamespacesResponse.


        :param parent_namespace: The parent_namespace of this NamespacesResponse.  # noqa: E501
        :type: str
        """
        if parent_namespace is None:
            raise ValueError("Invalid value for `parent_namespace`, must not be `None`")  # noqa: E501
        if parent_namespace is not None and len(parent_namespace) > 255:
            raise ValueError("Invalid value for `parent_namespace`, length must be less than or equal to `255`")  # noqa: E501
        if parent_namespace is not None and not re.search(r'^[A-Za-z0-9_.-]*$', parent_namespace):  # noqa: E501
            raise ValueError(r"Invalid value for `parent_namespace`, must be a follow pattern or equal to `/^[A-Za-z0-9_.-]*$/`")  # noqa: E501

        self._parent_namespace = parent_namespace

    @property
    def created(self):
        """Gets the created of this NamespacesResponse.  # noqa: E501

        timestamp in milliseconds since epoch  # noqa: E501

        :return: The created of this NamespacesResponse.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this NamespacesResponse.

        timestamp in milliseconds since epoch  # noqa: E501

        :param created: The created of this NamespacesResponse.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this NamespacesResponse.  # noqa: E501

        stewardname of who created space  # noqa: E501

        :return: The created_by of this NamespacesResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this NamespacesResponse.

        stewardname of who created space  # noqa: E501

        :param created_by: The created_by of this NamespacesResponse.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modifications(self):
        """Gets the modifications of this NamespacesResponse.  # noqa: E501


        :return: The modifications of this NamespacesResponse.  # noqa: E501
        :rtype: list[Modification]
        """
        return self._modifications

    @modifications.setter
    def modifications(self, modifications):
        """Sets the modifications of this NamespacesResponse.


        :param modifications: The modifications of this NamespacesResponse.  # noqa: E501
        :type: list[Modification]
        """

        self._modifications = modifications

    @property
    def stewards(self):
        """Gets the stewards of this NamespacesResponse.  # noqa: E501


        :return: The stewards of this NamespacesResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._stewards

    @stewards.setter
    def stewards(self, stewards):
        """Sets the stewards of this NamespacesResponse.


        :param stewards: The stewards of this NamespacesResponse.  # noqa: E501
        :type: list[str]
        """
        if stewards is None:
            raise ValueError("Invalid value for `stewards`, must not be `None`")  # noqa: E501

        self._stewards = stewards

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NamespacesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NamespacesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
