# coding: utf-8

"""
    Openmoney API

    Openmoney API  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JournalsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'to_account': 'str',
        'to_account_namespace': 'str',
        'from_account': 'str',
        'from_account_namespace': 'str',
        'currency': 'str',
        'currency_namespace': 'str',
        'amount': 'float',
        'created': 'int',
        'created_by': 'str',
        'payload': 'object'
    }

    attribute_map = {
        'to_account': 'to_account',
        'to_account_namespace': 'to_account_namespace',
        'from_account': 'from_account',
        'from_account_namespace': 'from_account_namespace',
        'currency': 'currency',
        'currency_namespace': 'currency_namespace',
        'amount': 'amount',
        'created': 'created',
        'created_by': 'created_by',
        'payload': 'payload'
    }

    def __init__(self, to_account=None, to_account_namespace=None, from_account=None, from_account_namespace=None, currency=None, currency_namespace=None, amount=None, created=None, created_by=None, payload=None):  # noqa: E501
        """JournalsResponse - a model defined in Swagger"""  # noqa: E501

        self._to_account = None
        self._to_account_namespace = None
        self._from_account = None
        self._from_account_namespace = None
        self._currency = None
        self._currency_namespace = None
        self._amount = None
        self._created = None
        self._created_by = None
        self._payload = None
        self.discriminator = None

        self.to_account = to_account
        self.to_account_namespace = to_account_namespace
        if from_account is not None:
            self.from_account = from_account
        if from_account_namespace is not None:
            self.from_account_namespace = from_account_namespace
        if currency is not None:
            self.currency = currency
        if currency_namespace is not None:
            self.currency_namespace = currency_namespace
        self.amount = amount
        if created is not None:
            self.created = created
        if created_by is not None:
            self.created_by = created_by
        if payload is not None:
            self.payload = payload

    @property
    def to_account(self):
        """Gets the to_account of this JournalsResponse.  # noqa: E501


        :return: The to_account of this JournalsResponse.  # noqa: E501
        :rtype: str
        """
        return self._to_account

    @to_account.setter
    def to_account(self, to_account):
        """Sets the to_account of this JournalsResponse.


        :param to_account: The to_account of this JournalsResponse.  # noqa: E501
        :type: str
        """
        if to_account is None:
            raise ValueError("Invalid value for `to_account`, must not be `None`")  # noqa: E501
        if to_account is not None and len(to_account) > 255:
            raise ValueError("Invalid value for `to_account`, length must be less than or equal to `255`")  # noqa: E501
        if to_account is not None and not re.search(r'^[A-Za-z0-9_-]+$', to_account):  # noqa: E501
            raise ValueError(r"Invalid value for `to_account`, must be a follow pattern or equal to `/^[A-Za-z0-9_-]+$/`")  # noqa: E501

        self._to_account = to_account

    @property
    def to_account_namespace(self):
        """Gets the to_account_namespace of this JournalsResponse.  # noqa: E501


        :return: The to_account_namespace of this JournalsResponse.  # noqa: E501
        :rtype: str
        """
        return self._to_account_namespace

    @to_account_namespace.setter
    def to_account_namespace(self, to_account_namespace):
        """Sets the to_account_namespace of this JournalsResponse.


        :param to_account_namespace: The to_account_namespace of this JournalsResponse.  # noqa: E501
        :type: str
        """
        if to_account_namespace is None:
            raise ValueError("Invalid value for `to_account_namespace`, must not be `None`")  # noqa: E501
        if to_account_namespace is not None and len(to_account_namespace) > 255:
            raise ValueError("Invalid value for `to_account_namespace`, length must be less than or equal to `255`")  # noqa: E501
        if to_account_namespace is not None and not re.search(r'^[A-Za-z0-9_.-]+$', to_account_namespace):  # noqa: E501
            raise ValueError(r"Invalid value for `to_account_namespace`, must be a follow pattern or equal to `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501

        self._to_account_namespace = to_account_namespace

    @property
    def from_account(self):
        """Gets the from_account of this JournalsResponse.  # noqa: E501


        :return: The from_account of this JournalsResponse.  # noqa: E501
        :rtype: str
        """
        return self._from_account

    @from_account.setter
    def from_account(self, from_account):
        """Sets the from_account of this JournalsResponse.


        :param from_account: The from_account of this JournalsResponse.  # noqa: E501
        :type: str
        """
        if from_account is not None and len(from_account) > 255:
            raise ValueError("Invalid value for `from_account`, length must be less than or equal to `255`")  # noqa: E501
        if from_account is not None and not re.search(r'^[A-Za-z0-9_-]+$', from_account):  # noqa: E501
            raise ValueError(r"Invalid value for `from_account`, must be a follow pattern or equal to `/^[A-Za-z0-9_-]+$/`")  # noqa: E501

        self._from_account = from_account

    @property
    def from_account_namespace(self):
        """Gets the from_account_namespace of this JournalsResponse.  # noqa: E501


        :return: The from_account_namespace of this JournalsResponse.  # noqa: E501
        :rtype: str
        """
        return self._from_account_namespace

    @from_account_namespace.setter
    def from_account_namespace(self, from_account_namespace):
        """Sets the from_account_namespace of this JournalsResponse.


        :param from_account_namespace: The from_account_namespace of this JournalsResponse.  # noqa: E501
        :type: str
        """
        if from_account_namespace is not None and len(from_account_namespace) > 255:
            raise ValueError("Invalid value for `from_account_namespace`, length must be less than or equal to `255`")  # noqa: E501
        if from_account_namespace is not None and not re.search(r'^[A-Za-z0-9_.-]+$', from_account_namespace):  # noqa: E501
            raise ValueError(r"Invalid value for `from_account_namespace`, must be a follow pattern or equal to `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501

        self._from_account_namespace = from_account_namespace

    @property
    def currency(self):
        """Gets the currency of this JournalsResponse.  # noqa: E501


        :return: The currency of this JournalsResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this JournalsResponse.


        :param currency: The currency of this JournalsResponse.  # noqa: E501
        :type: str
        """
        if currency is not None and len(currency) > 255:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `255`")  # noqa: E501
        if currency is not None and not re.search(r'^[A-Za-z0-9_-]+$', currency):  # noqa: E501
            raise ValueError(r"Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Za-z0-9_-]+$/`")  # noqa: E501

        self._currency = currency

    @property
    def currency_namespace(self):
        """Gets the currency_namespace of this JournalsResponse.  # noqa: E501


        :return: The currency_namespace of this JournalsResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency_namespace

    @currency_namespace.setter
    def currency_namespace(self, currency_namespace):
        """Sets the currency_namespace of this JournalsResponse.


        :param currency_namespace: The currency_namespace of this JournalsResponse.  # noqa: E501
        :type: str
        """
        if currency_namespace is not None and len(currency_namespace) > 255:
            raise ValueError("Invalid value for `currency_namespace`, length must be less than or equal to `255`")  # noqa: E501
        if currency_namespace is not None and not re.search(r'^[A-Za-z0-9_.-]*$', currency_namespace):  # noqa: E501
            raise ValueError(r"Invalid value for `currency_namespace`, must be a follow pattern or equal to `/^[A-Za-z0-9_.-]*$/`")  # noqa: E501

        self._currency_namespace = currency_namespace

    @property
    def amount(self):
        """Gets the amount of this JournalsResponse.  # noqa: E501


        :return: The amount of this JournalsResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this JournalsResponse.


        :param amount: The amount of this JournalsResponse.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501
        if amount is not None and amount < 0:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._amount = amount

    @property
    def created(self):
        """Gets the created of this JournalsResponse.  # noqa: E501


        :return: The created of this JournalsResponse.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this JournalsResponse.


        :param created: The created of this JournalsResponse.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this JournalsResponse.  # noqa: E501

        stewardname of who created entry  # noqa: E501

        :return: The created_by of this JournalsResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this JournalsResponse.

        stewardname of who created entry  # noqa: E501

        :param created_by: The created_by of this JournalsResponse.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def payload(self):
        """Gets the payload of this JournalsResponse.  # noqa: E501


        :return: The payload of this JournalsResponse.  # noqa: E501
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this JournalsResponse.


        :param payload: The payload of this JournalsResponse.  # noqa: E501
        :type: object
        """

        self._payload = payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JournalsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JournalsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
