# coding: utf-8

"""
    Openmoney API

    Openmoney API  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AuthApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def account_get(self, stewardname, **kwargs):  # noqa: E501
        """Get Steward account information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get(stewardname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_get_with_http_info(stewardname, **kwargs)  # noqa: E501
        else:
            (data) = self.account_get_with_http_info(stewardname, **kwargs)  # noqa: E501
            return data

    def account_get_with_http_info(self, stewardname, **kwargs):  # noqa: E501
        """Get Steward account information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_with_http_info(stewardname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stewardname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stewardname' is set
        if ('stewardname' not in params or
                params['stewardname'] is None):
            raise ValueError("Missing the required parameter `stewardname` when calling `account_get`")  # noqa: E501

        if ('stewardname' in params and
                len(params['stewardname']) > 255):
            raise ValueError("Invalid value for parameter `stewardname` when calling `account_get`, length must be less than or equal to `255`")  # noqa: E501
        if 'stewardname' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['stewardname']):  # noqa: E501
            raise ValueError("Invalid value for parameter `stewardname` when calling `account_get`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'stewardname' in params:
            path_params['stewardname'] = params['stewardname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stewards/{stewardname}/account', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login_get(self, stewardname, **kwargs):  # noqa: E501
        """Login Page for the steward  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_get(stewardname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login_get_with_http_info(stewardname, **kwargs)  # noqa: E501
        else:
            (data) = self.login_get_with_http_info(stewardname, **kwargs)  # noqa: E501
            return data

    def login_get_with_http_info(self, stewardname, **kwargs):  # noqa: E501
        """Login Page for the steward  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_get_with_http_info(stewardname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stewardname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stewardname' is set
        if ('stewardname' not in params or
                params['stewardname'] is None):
            raise ValueError("Missing the required parameter `stewardname` when calling `login_get`")  # noqa: E501

        if ('stewardname' in params and
                len(params['stewardname']) > 255):
            raise ValueError("Invalid value for parameter `stewardname` when calling `login_get`, length must be less than or equal to `255`")  # noqa: E501
        if 'stewardname' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['stewardname']):  # noqa: E501
            raise ValueError("Invalid value for parameter `stewardname` when calling `login_get`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'stewardname' in params:
            path_params['stewardname'] = params['stewardname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stewards/{stewardname}/login', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login_post(self, stewardname, **kwargs):  # noqa: E501
        """Login steward  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_post(stewardname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login_post_with_http_info(stewardname, **kwargs)  # noqa: E501
        else:
            (data) = self.login_post_with_http_info(stewardname, **kwargs)  # noqa: E501
            return data

    def login_post_with_http_info(self, stewardname, **kwargs):  # noqa: E501
        """Login steward  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_post_with_http_info(stewardname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stewardname', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stewardname' is set
        if ('stewardname' not in params or
                params['stewardname'] is None):
            raise ValueError("Missing the required parameter `stewardname` when calling `login_post`")  # noqa: E501

        if ('stewardname' in params and
                len(params['stewardname']) > 255):
            raise ValueError("Invalid value for parameter `stewardname` when calling `login_post`, length must be less than or equal to `255`")  # noqa: E501
        if 'stewardname' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['stewardname']):  # noqa: E501
            raise ValueError("Invalid value for parameter `stewardname` when calling `login_post`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        if 'authorization' in params and not re.search(r'^Basic [A-Za-z0-9\/+=.]+$', params['authorization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `authorization` when calling `login_post`, must conform to the pattern `/^Basic [A-Za-z0-9\/+=.]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'stewardname' in params:
            path_params['stewardname'] = params['stewardname']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stewards/{stewardname}/login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def logout_post(self, stewardname, **kwargs):  # noqa: E501
        """Logout steward  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logout_post(stewardname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.logout_post_with_http_info(stewardname, **kwargs)  # noqa: E501
        else:
            (data) = self.logout_post_with_http_info(stewardname, **kwargs)  # noqa: E501
            return data

    def logout_post_with_http_info(self, stewardname, **kwargs):  # noqa: E501
        """Logout steward  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logout_post_with_http_info(stewardname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stewardname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logout_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stewardname' is set
        if ('stewardname' not in params or
                params['stewardname'] is None):
            raise ValueError("Missing the required parameter `stewardname` when calling `logout_post`")  # noqa: E501

        if ('stewardname' in params and
                len(params['stewardname']) > 255):
            raise ValueError("Invalid value for parameter `stewardname` when calling `logout_post`, length must be less than or equal to `255`")  # noqa: E501
        if 'stewardname' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['stewardname']):  # noqa: E501
            raise ValueError("Invalid value for parameter `stewardname` when calling `logout_post`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'stewardname' in params:
            path_params['stewardname'] = params['stewardname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stewards/{stewardname}/logout', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def oauth_access_token_post(self, stewardname, access_token_request, **kwargs):  # noqa: E501
        """Exchanges the user or client credentials for an access token used to access resources.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oauth_access_token_post(stewardname, access_token_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param AccessTokenRequest access_token_request: Access Token Request Object (required)
        :param str authorization:
        :return: TokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.oauth_access_token_post_with_http_info(stewardname, access_token_request, **kwargs)  # noqa: E501
        else:
            (data) = self.oauth_access_token_post_with_http_info(stewardname, access_token_request, **kwargs)  # noqa: E501
            return data

    def oauth_access_token_post_with_http_info(self, stewardname, access_token_request, **kwargs):  # noqa: E501
        """Exchanges the user or client credentials for an access token used to access resources.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oauth_access_token_post_with_http_info(stewardname, access_token_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param AccessTokenRequest access_token_request: Access Token Request Object (required)
        :param str authorization:
        :return: TokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stewardname', 'access_token_request', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oauth_access_token_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stewardname' is set
        if ('stewardname' not in params or
                params['stewardname'] is None):
            raise ValueError("Missing the required parameter `stewardname` when calling `oauth_access_token_post`")  # noqa: E501
        # verify the required parameter 'access_token_request' is set
        if ('access_token_request' not in params or
                params['access_token_request'] is None):
            raise ValueError("Missing the required parameter `access_token_request` when calling `oauth_access_token_post`")  # noqa: E501

        if ('stewardname' in params and
                len(params['stewardname']) > 255):
            raise ValueError("Invalid value for parameter `stewardname` when calling `oauth_access_token_post`, length must be less than or equal to `255`")  # noqa: E501
        if 'stewardname' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['stewardname']):  # noqa: E501
            raise ValueError("Invalid value for parameter `stewardname` when calling `oauth_access_token_post`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        if 'authorization' in params and not re.search(r'^Bearer|Basic [A-Za-z0-9\/+=.]+$', params['authorization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `authorization` when calling `oauth_access_token_post`, must conform to the pattern `/^Bearer|Basic [A-Za-z0-9\/+=.]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'stewardname' in params:
            path_params['stewardname'] = params['stewardname']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'access_token_request' in params:
            body_params = params['access_token_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuthenticationSecurity', 'oauth2Refresh']  # noqa: E501

        return self.api_client.call_api(
            '/stewards/{stewardname}/oauth/token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def oauth_application_post(self, stewardname, application, **kwargs):  # noqa: E501
        """Create an application for a client_id and client_secret for oauth token authorization.  # noqa: E501

        Existing steward Registers an application with the openmoney network.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oauth_application_post(stewardname, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param ApplicationRequest application: Application Object (required)
        :param str authorization:
        :return: ApplicationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.oauth_application_post_with_http_info(stewardname, application, **kwargs)  # noqa: E501
        else:
            (data) = self.oauth_application_post_with_http_info(stewardname, application, **kwargs)  # noqa: E501
            return data

    def oauth_application_post_with_http_info(self, stewardname, application, **kwargs):  # noqa: E501
        """Create an application for a client_id and client_secret for oauth token authorization.  # noqa: E501

        Existing steward Registers an application with the openmoney network.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oauth_application_post_with_http_info(stewardname, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param ApplicationRequest application: Application Object (required)
        :param str authorization:
        :return: ApplicationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stewardname', 'application', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oauth_application_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stewardname' is set
        if ('stewardname' not in params or
                params['stewardname'] is None):
            raise ValueError("Missing the required parameter `stewardname` when calling `oauth_application_post`")  # noqa: E501
        # verify the required parameter 'application' is set
        if ('application' not in params or
                params['application'] is None):
            raise ValueError("Missing the required parameter `application` when calling `oauth_application_post`")  # noqa: E501

        if ('stewardname' in params and
                len(params['stewardname']) > 255):
            raise ValueError("Invalid value for parameter `stewardname` when calling `oauth_application_post`, length must be less than or equal to `255`")  # noqa: E501
        if 'stewardname' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['stewardname']):  # noqa: E501
            raise ValueError("Invalid value for parameter `stewardname` when calling `oauth_application_post`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        if 'authorization' in params and not re.search(r'^Basic [A-Za-z0-9\/+=.]+$', params['authorization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `authorization` when calling `oauth_application_post`, must conform to the pattern `/^Basic [A-Za-z0-9\/+=.]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'stewardname' in params:
            path_params['stewardname'] = params['stewardname']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application' in params:
            body_params = params['application']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuthenticationSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/stewards/{stewardname}/oauth/application', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def oauth_dialoge_get(self, stewardname, client_id, **kwargs):  # noqa: E501
        """Implicit authorization dialog presented to steward to authorize client_id to access API resources on their behalf.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oauth_dialoge_get(stewardname, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param str client_id: Client ID received during registration (required)
        :param str redirect_uri: A uri to redirect steward after authorization
        :param list[str] scopes: A comma separated list of scopes. If not provided, scope defaults to an empty list of scopes for stewards that don’t have a valid token for the app. For stewards who do already have a valid token for the app, the steward won’t be shown the OAuth authorization page with the list of scopes. Instead, this step of the flow will automatically complete with the same scopes that were used last time the steward completed the flow.
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.oauth_dialoge_get_with_http_info(stewardname, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.oauth_dialoge_get_with_http_info(stewardname, client_id, **kwargs)  # noqa: E501
            return data

    def oauth_dialoge_get_with_http_info(self, stewardname, client_id, **kwargs):  # noqa: E501
        """Implicit authorization dialog presented to steward to authorize client_id to access API resources on their behalf.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oauth_dialoge_get_with_http_info(stewardname, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param str client_id: Client ID received during registration (required)
        :param str redirect_uri: A uri to redirect steward after authorization
        :param list[str] scopes: A comma separated list of scopes. If not provided, scope defaults to an empty list of scopes for stewards that don’t have a valid token for the app. For stewards who do already have a valid token for the app, the steward won’t be shown the OAuth authorization page with the list of scopes. Instead, this step of the flow will automatically complete with the same scopes that were used last time the steward completed the flow.
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stewardname', 'client_id', 'redirect_uri', 'scopes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oauth_dialoge_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stewardname' is set
        if ('stewardname' not in params or
                params['stewardname'] is None):
            raise ValueError("Missing the required parameter `stewardname` when calling `oauth_dialoge_get`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `oauth_dialoge_get`")  # noqa: E501

        if ('stewardname' in params and
                len(params['stewardname']) > 255):
            raise ValueError("Invalid value for parameter `stewardname` when calling `oauth_dialoge_get`, length must be less than or equal to `255`")  # noqa: E501
        if 'stewardname' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['stewardname']):  # noqa: E501
            raise ValueError("Invalid value for parameter `stewardname` when calling `oauth_dialoge_get`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        if ('client_id' in params and
                len(params['client_id']) > 800):
            raise ValueError("Invalid value for parameter `client_id` when calling `oauth_dialoge_get`, length must be less than or equal to `800`")  # noqa: E501
        if ('client_id' in params and
                len(params['client_id']) < 5):
            raise ValueError("Invalid value for parameter `client_id` when calling `oauth_dialoge_get`, length must be greater than or equal to `5`")  # noqa: E501
        if 'client_id' in params and not re.search(r'^[A-Za-z0-9\\\\\\s\/=+-]+$', params['client_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `client_id` when calling `oauth_dialoge_get`, must conform to the pattern `/^[A-Za-z0-9\\\\\\s\/=+-]+$/`")  # noqa: E501
        if ('redirect_uri' in params and
                len(params['redirect_uri']) > 512):
            raise ValueError("Invalid value for parameter `redirect_uri` when calling `oauth_dialoge_get`, length must be less than or equal to `512`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'stewardname' in params:
            path_params['stewardname'] = params['stewardname']  # noqa: E501

        query_params = []
        if 'client_id' in params:
            query_params.append(('client_id', params['client_id']))  # noqa: E501
        if 'redirect_uri' in params:
            query_params.append(('redirect_uri', params['redirect_uri']))  # noqa: E501
        if 'scopes' in params:
            query_params.append(('scopes', params['scopes']))  # noqa: E501
            collection_formats['scopes'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stewards/{stewardname}/dialog/authorize', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def oauth_dialoge_post(self, stewardname, oauth_authorize_request, **kwargs):  # noqa: E501
        """Authorizes a steward on the openmoney network  # noqa: E501

        Authorization dialoge decision with allowed scopes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oauth_dialoge_post(stewardname, oauth_authorize_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param OauthAuthorizeRequest oauth_authorize_request: (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.oauth_dialoge_post_with_http_info(stewardname, oauth_authorize_request, **kwargs)  # noqa: E501
        else:
            (data) = self.oauth_dialoge_post_with_http_info(stewardname, oauth_authorize_request, **kwargs)  # noqa: E501
            return data

    def oauth_dialoge_post_with_http_info(self, stewardname, oauth_authorize_request, **kwargs):  # noqa: E501
        """Authorizes a steward on the openmoney network  # noqa: E501

        Authorization dialoge decision with allowed scopes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oauth_dialoge_post_with_http_info(stewardname, oauth_authorize_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param OauthAuthorizeRequest oauth_authorize_request: (required)
        :return: ErrorModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stewardname', 'oauth_authorize_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oauth_dialoge_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stewardname' is set
        if ('stewardname' not in params or
                params['stewardname'] is None):
            raise ValueError("Missing the required parameter `stewardname` when calling `oauth_dialoge_post`")  # noqa: E501
        # verify the required parameter 'oauth_authorize_request' is set
        if ('oauth_authorize_request' not in params or
                params['oauth_authorize_request'] is None):
            raise ValueError("Missing the required parameter `oauth_authorize_request` when calling `oauth_dialoge_post`")  # noqa: E501

        if ('stewardname' in params and
                len(params['stewardname']) > 255):
            raise ValueError("Invalid value for parameter `stewardname` when calling `oauth_dialoge_post`, length must be less than or equal to `255`")  # noqa: E501
        if 'stewardname' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['stewardname']):  # noqa: E501
            raise ValueError("Invalid value for parameter `stewardname` when calling `oauth_dialoge_post`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'stewardname' in params:
            path_params['stewardname'] = params['stewardname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'oauth_authorize_request' in params:
            body_params = params['oauth_authorize_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stewards/{stewardname}/dialog/authorize/decision', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
