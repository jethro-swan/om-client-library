# coding: utf-8

"""
    Openmoney API

    Openmoney API  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccountsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def accounts_delete(self, stewardname, namespace, account, **kwargs):  # noqa: E501
        """Delete an account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_delete(stewardname, namespace, account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param str namespace: (required)
        :param str account: (required)
        :param str authorization: Authorization Token
        :return: DeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_delete_with_http_info(stewardname, namespace, account, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_delete_with_http_info(stewardname, namespace, account, **kwargs)  # noqa: E501
            return data

    def accounts_delete_with_http_info(self, stewardname, namespace, account, **kwargs):  # noqa: E501
        """Delete an account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_delete_with_http_info(stewardname, namespace, account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param str namespace: (required)
        :param str account: (required)
        :param str authorization: Authorization Token
        :return: DeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stewardname', 'namespace', 'account', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stewardname' is set
        if ('stewardname' not in params or
                params['stewardname'] is None):
            raise ValueError("Missing the required parameter `stewardname` when calling `accounts_delete`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if ('namespace' not in params or
                params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `accounts_delete`")  # noqa: E501
        # verify the required parameter 'account' is set
        if ('account' not in params or
                params['account'] is None):
            raise ValueError("Missing the required parameter `account` when calling `accounts_delete`")  # noqa: E501

        if 'stewardname' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['stewardname']):  # noqa: E501
            raise ValueError("Invalid value for parameter `stewardname` when calling `accounts_delete`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        if ('namespace' in params and
                len(params['namespace']) > 255):
            raise ValueError("Invalid value for parameter `namespace` when calling `accounts_delete`, length must be less than or equal to `255`")  # noqa: E501
        if 'namespace' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['namespace']):  # noqa: E501
            raise ValueError("Invalid value for parameter `namespace` when calling `accounts_delete`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        if ('account' in params and
                len(params['account']) > 1024):
            raise ValueError("Invalid value for parameter `account` when calling `accounts_delete`, length must be less than or equal to `1024`")  # noqa: E501
        if 'account' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['account']):  # noqa: E501
            raise ValueError("Invalid value for parameter `account` when calling `accounts_delete`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        if 'authorization' in params and not re.search(r'^Bearer [A-Za-z0-9=\/+]+$', params['authorization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `authorization` when calling `accounts_delete`, must conform to the pattern `/^Bearer [A-Za-z0-9=\/+]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'stewardname' in params:
            path_params['stewardname'] = params['stewardname']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501
        if 'account' in params:
            path_params['account'] = params['account']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity', 'basicAuthenticationSecurity', 'oauth2AccessCodeSecurity', 'oauth2ApplicationSecurity', 'oauth2ImplicitSecurity', 'oauth2PasswordSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/stewards/{stewardname}/namespaces/{namespace}/accounts/{account}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_discovery(self, stewardname, **kwargs):  # noqa: E501
        """Lookup an account by it's public key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_discovery(stewardname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param str authorization: Authorization Token
        :param str public_key: Accounts public Key
        :return: AccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_discovery_with_http_info(stewardname, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_discovery_with_http_info(stewardname, **kwargs)  # noqa: E501
            return data

    def accounts_discovery_with_http_info(self, stewardname, **kwargs):  # noqa: E501
        """Lookup an account by it's public key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_discovery_with_http_info(stewardname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param str authorization: Authorization Token
        :param str public_key: Accounts public Key
        :return: AccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stewardname', 'authorization', 'public_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_discovery" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stewardname' is set
        if ('stewardname' not in params or
                params['stewardname'] is None):
            raise ValueError("Missing the required parameter `stewardname` when calling `accounts_discovery`")  # noqa: E501

        if 'stewardname' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['stewardname']):  # noqa: E501
            raise ValueError("Invalid value for parameter `stewardname` when calling `accounts_discovery`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        if 'authorization' in params and not re.search(r'^Bearer [A-Za-z0-9=\/+]+$', params['authorization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `authorization` when calling `accounts_discovery`, must conform to the pattern `/^Bearer [A-Za-z0-9=\/+]+$/`")  # noqa: E501
        if ('public_key' in params and
                len(params['public_key']) > 800):
            raise ValueError("Invalid value for parameter `public_key` when calling `accounts_discovery`, length must be less than or equal to `800`")  # noqa: E501
        if ('public_key' in params and
                len(params['public_key']) < 1):
            raise ValueError("Invalid value for parameter `public_key` when calling `accounts_discovery`, length must be greater than or equal to `1`")  # noqa: E501
        if 'public_key' in params and not re.search(r'^[A-Za-z0-9\\\\\\s\/=+-]+$', params['public_key']):  # noqa: E501
            raise ValueError("Invalid value for parameter `public_key` when calling `accounts_discovery`, must conform to the pattern `/^[A-Za-z0-9\\\\\\s\/=+-]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'stewardname' in params:
            path_params['stewardname'] = params['stewardname']  # noqa: E501

        query_params = []
        if 'public_key' in params:
            query_params.append(('publicKey', params['public_key']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity', 'basicAuthenticationSecurity', 'oauth2AccessCodeSecurity', 'oauth2ApplicationSecurity', 'oauth2ImplicitSecurity', 'oauth2PasswordSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/stewards/{stewardname}/accounts/lookup', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_get(self, stewardname, namespace, account, currency, currency_namespace, **kwargs):  # noqa: E501
        """Get an account by account name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_get(stewardname, namespace, account, currency, currency_namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param str namespace: (required)
        :param str account: (required)
        :param str currency: (required)
        :param str currency_namespace: (required)
        :param str authorization: Authorization Token
        :return: AccountsGet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_get_with_http_info(stewardname, namespace, account, currency, currency_namespace, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_get_with_http_info(stewardname, namespace, account, currency, currency_namespace, **kwargs)  # noqa: E501
            return data

    def accounts_get_with_http_info(self, stewardname, namespace, account, currency, currency_namespace, **kwargs):  # noqa: E501
        """Get an account by account name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_get_with_http_info(stewardname, namespace, account, currency, currency_namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param str namespace: (required)
        :param str account: (required)
        :param str currency: (required)
        :param str currency_namespace: (required)
        :param str authorization: Authorization Token
        :return: AccountsGet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stewardname', 'namespace', 'account', 'currency', 'currency_namespace', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stewardname' is set
        if ('stewardname' not in params or
                params['stewardname'] is None):
            raise ValueError("Missing the required parameter `stewardname` when calling `accounts_get`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if ('namespace' not in params or
                params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `accounts_get`")  # noqa: E501
        # verify the required parameter 'account' is set
        if ('account' not in params or
                params['account'] is None):
            raise ValueError("Missing the required parameter `account` when calling `accounts_get`")  # noqa: E501
        # verify the required parameter 'currency' is set
        if ('currency' not in params or
                params['currency'] is None):
            raise ValueError("Missing the required parameter `currency` when calling `accounts_get`")  # noqa: E501
        # verify the required parameter 'currency_namespace' is set
        if ('currency_namespace' not in params or
                params['currency_namespace'] is None):
            raise ValueError("Missing the required parameter `currency_namespace` when calling `accounts_get`")  # noqa: E501

        if 'stewardname' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['stewardname']):  # noqa: E501
            raise ValueError("Invalid value for parameter `stewardname` when calling `accounts_get`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        if ('namespace' in params and
                len(params['namespace']) > 255):
            raise ValueError("Invalid value for parameter `namespace` when calling `accounts_get`, length must be less than or equal to `255`")  # noqa: E501
        if 'namespace' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['namespace']):  # noqa: E501
            raise ValueError("Invalid value for parameter `namespace` when calling `accounts_get`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        if ('account' in params and
                len(params['account']) > 255):
            raise ValueError("Invalid value for parameter `account` when calling `accounts_get`, length must be less than or equal to `255`")  # noqa: E501
        if 'account' in params and not re.search(r'^[A-Za-z0-9_-]+$', params['account']):  # noqa: E501
            raise ValueError("Invalid value for parameter `account` when calling `accounts_get`, must conform to the pattern `/^[A-Za-z0-9_-]+$/`")  # noqa: E501
        if ('currency' in params and
                len(params['currency']) > 255):
            raise ValueError("Invalid value for parameter `currency` when calling `accounts_get`, length must be less than or equal to `255`")  # noqa: E501
        if 'currency' in params and not re.search(r'^[A-Za-z0-9_-]+$', params['currency']):  # noqa: E501
            raise ValueError("Invalid value for parameter `currency` when calling `accounts_get`, must conform to the pattern `/^[A-Za-z0-9_-]+$/`")  # noqa: E501
        if ('currency_namespace' in params and
                len(params['currency_namespace']) > 255):
            raise ValueError("Invalid value for parameter `currency_namespace` when calling `accounts_get`, length must be less than or equal to `255`")  # noqa: E501
        if 'currency_namespace' in params and not re.search(r'^[A-Za-z0-9_.-]*$', params['currency_namespace']):  # noqa: E501
            raise ValueError("Invalid value for parameter `currency_namespace` when calling `accounts_get`, must conform to the pattern `/^[A-Za-z0-9_.-]*$/`")  # noqa: E501
        if 'authorization' in params and not re.search(r'^Bearer [A-Za-z0-9=\/+]+$', params['authorization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `authorization` when calling `accounts_get`, must conform to the pattern `/^Bearer [A-Za-z0-9=\/+]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'stewardname' in params:
            path_params['stewardname'] = params['stewardname']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501
        if 'account' in params:
            path_params['account'] = params['account']  # noqa: E501

        query_params = []
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501
        if 'currency_namespace' in params:
            query_params.append(('currency_namespace', params['currency_namespace']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity', 'basicAuthenticationSecurity', 'oauth2AccessCodeSecurity', 'oauth2ApplicationSecurity', 'oauth2ImplicitSecurity', 'oauth2PasswordSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/stewards/{stewardname}/namespaces/{namespace}/accounts/{account}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsGet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_list(self, stewardname, **kwargs):  # noqa: E501
        """Get a Listing of accounts in a namespace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_list(stewardname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param str authorization: Authorization Token
        :param str namespace:
        :param str currency:
        :param str currency_namespace:
        :return: AccountsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_list_with_http_info(stewardname, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_list_with_http_info(stewardname, **kwargs)  # noqa: E501
            return data

    def accounts_list_with_http_info(self, stewardname, **kwargs):  # noqa: E501
        """Get a Listing of accounts in a namespace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_list_with_http_info(stewardname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param str authorization: Authorization Token
        :param str namespace:
        :param str currency:
        :param str currency_namespace:
        :return: AccountsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stewardname', 'authorization', 'namespace', 'currency', 'currency_namespace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stewardname' is set
        if ('stewardname' not in params or
                params['stewardname'] is None):
            raise ValueError("Missing the required parameter `stewardname` when calling `accounts_list`")  # noqa: E501

        if 'stewardname' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['stewardname']):  # noqa: E501
            raise ValueError("Invalid value for parameter `stewardname` when calling `accounts_list`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        if 'authorization' in params and not re.search(r'^Bearer [A-Za-z0-9=\/+]+$', params['authorization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `authorization` when calling `accounts_list`, must conform to the pattern `/^Bearer [A-Za-z0-9=\/+]+$/`")  # noqa: E501
        if ('namespace' in params and
                len(params['namespace']) > 255):
            raise ValueError("Invalid value for parameter `namespace` when calling `accounts_list`, length must be less than or equal to `255`")  # noqa: E501
        if 'namespace' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['namespace']):  # noqa: E501
            raise ValueError("Invalid value for parameter `namespace` when calling `accounts_list`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        if ('currency' in params and
                len(params['currency']) > 255):
            raise ValueError("Invalid value for parameter `currency` when calling `accounts_list`, length must be less than or equal to `255`")  # noqa: E501
        if 'currency' in params and not re.search(r'^[A-Za-z0-9_-]+$', params['currency']):  # noqa: E501
            raise ValueError("Invalid value for parameter `currency` when calling `accounts_list`, must conform to the pattern `/^[A-Za-z0-9_-]+$/`")  # noqa: E501
        if ('currency_namespace' in params and
                len(params['currency_namespace']) > 255):
            raise ValueError("Invalid value for parameter `currency_namespace` when calling `accounts_list`, length must be less than or equal to `255`")  # noqa: E501
        if 'currency_namespace' in params and not re.search(r'^[A-Za-z0-9_.-]*$', params['currency_namespace']):  # noqa: E501
            raise ValueError("Invalid value for parameter `currency_namespace` when calling `accounts_list`, must conform to the pattern `/^[A-Za-z0-9_.-]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'stewardname' in params:
            path_params['stewardname'] = params['stewardname']  # noqa: E501

        query_params = []
        if 'namespace' in params:
            query_params.append(('namespace', params['namespace']))  # noqa: E501
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501
        if 'currency_namespace' in params:
            query_params.append(('currency_namespace', params['currency_namespace']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity', 'basicAuthenticationSecurity', 'oauth2AccessCodeSecurity', 'oauth2ApplicationSecurity', 'oauth2ImplicitSecurity', 'oauth2PasswordSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/stewards/{stewardname}/accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_post(self, stewardname, namespace, **kwargs):  # noqa: E501
        """create an account in a namespace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_post(stewardname, namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param str namespace: (required)
        :param str authorization: Authorization Token
        :param AccountsRequest account:
        :return: DeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_post_with_http_info(stewardname, namespace, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_post_with_http_info(stewardname, namespace, **kwargs)  # noqa: E501
            return data

    def accounts_post_with_http_info(self, stewardname, namespace, **kwargs):  # noqa: E501
        """create an account in a namespace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_post_with_http_info(stewardname, namespace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param str namespace: (required)
        :param str authorization: Authorization Token
        :param AccountsRequest account:
        :return: DeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stewardname', 'namespace', 'authorization', 'account']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stewardname' is set
        if ('stewardname' not in params or
                params['stewardname'] is None):
            raise ValueError("Missing the required parameter `stewardname` when calling `accounts_post`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if ('namespace' not in params or
                params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `accounts_post`")  # noqa: E501

        if 'stewardname' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['stewardname']):  # noqa: E501
            raise ValueError("Invalid value for parameter `stewardname` when calling `accounts_post`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        if ('namespace' in params and
                len(params['namespace']) > 255):
            raise ValueError("Invalid value for parameter `namespace` when calling `accounts_post`, length must be less than or equal to `255`")  # noqa: E501
        if 'namespace' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['namespace']):  # noqa: E501
            raise ValueError("Invalid value for parameter `namespace` when calling `accounts_post`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        if 'authorization' in params and not re.search(r'^Bearer [A-Za-z0-9=\/+]+$', params['authorization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `authorization` when calling `accounts_post`, must conform to the pattern `/^Bearer [A-Za-z0-9=\/+]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'stewardname' in params:
            path_params['stewardname'] = params['stewardname']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'account' in params:
            body_params = params['account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity', 'basicAuthenticationSecurity', 'oauth2AccessCodeSecurity', 'oauth2ApplicationSecurity', 'oauth2ImplicitSecurity', 'oauth2PasswordSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/stewards/{stewardname}/namespaces/{namespace}/accounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_put(self, stewardname, namespace, account, **kwargs):  # noqa: E501
        """Update an account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_put(stewardname, namespace, account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param str namespace: (required)
        :param str account: Account Name (required)
        :param str authorization: Authorization Token
        :param AccountsRequest accounts:
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_put_with_http_info(stewardname, namespace, account, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_put_with_http_info(stewardname, namespace, account, **kwargs)  # noqa: E501
            return data

    def accounts_put_with_http_info(self, stewardname, namespace, account, **kwargs):  # noqa: E501
        """Update an account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_put_with_http_info(stewardname, namespace, account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stewardname: (required)
        :param str namespace: (required)
        :param str account: Account Name (required)
        :param str authorization: Authorization Token
        :param AccountsRequest accounts:
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stewardname', 'namespace', 'account', 'authorization', 'accounts']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stewardname' is set
        if ('stewardname' not in params or
                params['stewardname'] is None):
            raise ValueError("Missing the required parameter `stewardname` when calling `accounts_put`")  # noqa: E501
        # verify the required parameter 'namespace' is set
        if ('namespace' not in params or
                params['namespace'] is None):
            raise ValueError("Missing the required parameter `namespace` when calling `accounts_put`")  # noqa: E501
        # verify the required parameter 'account' is set
        if ('account' not in params or
                params['account'] is None):
            raise ValueError("Missing the required parameter `account` when calling `accounts_put`")  # noqa: E501

        if 'stewardname' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['stewardname']):  # noqa: E501
            raise ValueError("Invalid value for parameter `stewardname` when calling `accounts_put`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        if ('namespace' in params and
                len(params['namespace']) > 255):
            raise ValueError("Invalid value for parameter `namespace` when calling `accounts_put`, length must be less than or equal to `255`")  # noqa: E501
        if 'namespace' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['namespace']):  # noqa: E501
            raise ValueError("Invalid value for parameter `namespace` when calling `accounts_put`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        if ('account' in params and
                len(params['account']) > 1024):
            raise ValueError("Invalid value for parameter `account` when calling `accounts_put`, length must be less than or equal to `1024`")  # noqa: E501
        if 'account' in params and not re.search(r'^[A-Za-z0-9_.-]+$', params['account']):  # noqa: E501
            raise ValueError("Invalid value for parameter `account` when calling `accounts_put`, must conform to the pattern `/^[A-Za-z0-9_.-]+$/`")  # noqa: E501
        if 'authorization' in params and not re.search(r'^Bearer [A-Za-z0-9=\/+]+$', params['authorization']):  # noqa: E501
            raise ValueError("Invalid value for parameter `authorization` when calling `accounts_put`, must conform to the pattern `/^Bearer [A-Za-z0-9=\/+]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'stewardname' in params:
            path_params['stewardname'] = params['stewardname']  # noqa: E501
        if 'namespace' in params:
            path_params['namespace'] = params['namespace']  # noqa: E501
        if 'account' in params:
            path_params['account'] = params['account']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'accounts' in params:
            body_params = params['accounts']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeySecurity', 'basicAuthenticationSecurity', 'oauth2AccessCodeSecurity', 'oauth2ApplicationSecurity', 'oauth2ImplicitSecurity', 'oauth2PasswordSecurity']  # noqa: E501

        return self.api_client.call_api(
            '/stewards/{stewardname}/namespaces/{namespace}/accounts/{account}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
